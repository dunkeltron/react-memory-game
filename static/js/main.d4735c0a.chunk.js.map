{"version":3,"sources":["components/GamePanel/bumblebee.png","components/GamePanel/devastator.png","components/GamePanel/grimlock.png","components/GamePanel/megatron.png","components/GamePanel/optimus_prime.png","components/GamePanel/prowl.png","components/GamePanel/shockwave.png","components/GamePanel/soundwave.png","components/GamePanel/starscream.png","components/GamePanel/thundercracker.png","components/GamePanel/ultra_magnus.png","components/GamePanel/wheeljack.png","components/ScoreBar/index.js","components/GamePanel/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ScoreBar","state","score","_this","props","topScore","infoText","wins","this","_this$getState","getState","winningClick","setState","_this$getState2","_this$getState3","console","log","window","addEventListener","updateWidth","removeEventListener","react_default","a","createElement","className","href","Component","GamePanel","cards","initialCards","componentDidMount","createCardArray","arr","altArr","imgArr","Bumblebee","Devastator","Grimlock","Megatron","OptimusPrime","Prowl","Shockwave","Soundwave","Starscream","Thundercracker","UltraMagnus","Wheeljack","i","newCard","key","id","altText","clicked","push","handleClick","event","preventDefault","target","resetGame","updateScore","isGameOver","initialPositions","tempArr","shuffleArray","array","j","temp","length","Math","floor","random","newScore","_this2","Fragment","components_ScoreBar","map","card","onClick","src","alt","App","components_GamePanel","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4735c0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bumblebee.5068c84f.png\";","module.exports = __webpack_public_path__ + \"static/media/devastator.adee3d35.png\";","module.exports = __webpack_public_path__ + \"static/media/grimlock.6b23993f.png\";","module.exports = __webpack_public_path__ + \"static/media/megatron.b8b2586b.png\";","module.exports = __webpack_public_path__ + \"static/media/optimus_prime.21e07227.png\";","module.exports = __webpack_public_path__ + \"static/media/prowl.fe999bdc.png\";","module.exports = __webpack_public_path__ + \"static/media/shockwave.9fdcc986.png\";","module.exports = __webpack_public_path__ + \"static/media/soundwave.3f8b396a.png\";","module.exports = __webpack_public_path__ + \"static/media/starscream.db2d3fb4.png\";","module.exports = __webpack_public_path__ + \"static/media/thundercracker.af833498.png\";","module.exports = __webpack_public_path__ + \"static/media/ultra_magnus.bd338ed6.png\";","module.exports = __webpack_public_path__ + \"static/media/wheeljack.9c59d0b2.png\";","import React, { Component } from \"react\";\nimport \"./styles.css\";\n\nclass ScoreBar extends Component {\n  state = {\n    score: this.props.score,\n    topScore: this.props.topScore,\n    infoText: \"Click a character to start!\",\n    wins: this.props.wins\n  };\n  getState(){\n    return this.state;\n  }\n  correctClick(){\n    var {\n      score,\n      infoText\n    } = this.getState();\n    if (score === 12) {\n      this.winningClick();\n    } else {\n      infoText = \"You guessed correctly\";\n      this.setState({\n        infoText\n      });\n    }\n  }\n\n  incorrectClick(){\n    var {score ,topScore, infoText} = this.getState();\n    infoText = \"You guessed incorrectly\";\n    this.setState({score ,topScore, infoText});\n  }\n  winnerClick(){\n    var {score ,topScore, infoText,wins} = this.getState();\n    infoText = \"You Won! Click again to start over.\"\n    console.log(\"You won! This is win number  \"+ wins + \" for you. Congratulations!\");\n    this.setState({score,topScore,infoText,wins})\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateWidth);\n    console.log(\"state\",this.state);\n    console.log(\"props\",this.props);\n    this.setState({\n            score: this.props.score,\n            topScore: this.props.topScore,\n            infoText: \"Click a character to start!\",\n            wins: this.props.wins\n    });\n  }\n\n  componentWillUnMount() {\n    window.removeEventListener(\"resize\", this.updateWidth);\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar-dark bg-dark\">\n      <div className = \"row justify-content-center\">\n        <a className=\"navbar-brand  nav-item \" href=\"/\">\n          Clicky Game\n        </a>  \n        <p className=\"nav-item info-text\">\n              {this.props.infoText}\n        </p>\n        <p className=\"nav-item score-bar \" >\n          Score: {this.props.score} | Top Score: {this.props.topScore}\n        </p>\n\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default ScoreBar;\n","import React, { Component } from \"react\";\nimport ScoreBar from \"../ScoreBar\";\nimport \"./panelStyles.css\";\nimport Bumblebee from \"./bumblebee.png\";\nimport Devastator from \"./devastator.png\";\nimport Grimlock from \"./grimlock.png\";\nimport Megatron from \"./megatron.png\";\nimport OptimusPrime from \"./optimus_prime.png\";\nimport Prowl from \"./prowl.png\";\nimport Shockwave from \"./shockwave.png\";\nimport Soundwave from \"./soundwave.png\";\nimport Starscream from \"./starscream.png\";\nimport Thundercracker from \"./thundercracker.png\";\nimport UltraMagnus from \"./ultra_magnus.png\";\nimport Wheeljack from \"./wheeljack.png\";\n\n\nclass GamePanel extends Component {\n  /*\n    score = the number of clicks w/o clicking a pre clicked element\n    topScore = the highest score (tops off at a complete game for now)\n    wins = the number of wins in the current session (included for future use)\n    cards = the cards to display to the page. We only want to change the order of this array\n    initialCards = the cards initial order. We only want to modify the clicked value of the objects in this array.\n  */\n  state = {\n    score: 0,\n    topScore: 0,\n    wins: 0,\n    cards: [],\n    initialCards: [],\n    infoText:\"Click a character to start!\"\n  };\n  //set up both arrays of cards upon mounting of the compnonent\n  componentDidMount = () => {\n    this.setState({cards: this.createCardArray(),initialCards:this.createCardArray()})\n    \n  }\n  //set up the state of the card objects we use to play the game.\n  createCardArray = () =>{\n    //temp array to store our cards in\n    var arr =[];\n    //set the alt texts for the cards \n    var altArr = [\"bumblebee\", \"devastator\",\"grimlock\",\n \"megatron\",\"optimus-prime\",\"prowl\",\"shockwave\",\"soundwave\",\"starscream\",\"thundercracker\",\"ultra-magnus\",\"wheeljack\"];\n    // we import the images at the top of the page and assign them ref variables so they can be properly dispalyed in react.\n    var imgArr = [Bumblebee,Devastator,Grimlock,Megatron,OptimusPrime,Prowl,Shockwave,Soundwave,Starscream,Thundercracker,UltraMagnus,Wheeljack]\n    \n    //we have 12 cards in our game so we want to go throguh and create all 12 cards and push them to the array\n    for(var i=0 ; i<12 ; i++){\n        var newCard={key:i,\n                    id:i,\n                    altText:altArr[i], \n                    clicked:false,\n                    href:imgArr[i]}\n        //push the new object into our temp array\n        arr.push(newCard);\n    }\n    //send our array back for assignment\n    return arr\n  }\n\n  \n\n  //on click we want to \n    //1) check the clicked status of the clicked on item,\n    //2) if clicked = true  we reset the game\n    //3) if clicked = false update clicked status and shuffle \n  handleClick = (event) =>{\n    event.preventDefault();\n    //if the card has already been clicked the player loses and the game resets\n    console.log(event.target.className);\n    if(this.state.initialCards[event.target.id].clicked){\n       console.log(\"Game Over!\");\n       this.setState({infoText:\"You guessed incorrectly. Game Reset.\"})\n       this.resetGame();\n    }\n    /*   if not we want to update the game state\n          we want to award the player a point\n          set a new topScore (if necessary)\n    */\n    else{\n      this.updateScore();\n      //after updating the score check if the player won\n      if(this.isGameOver()){\n        console.log(\"You are the champion!\");\n        this.setState({wins: this.state.wins+1,infoText : \"You Won! Click again to start over.\"})\n        \n        console.log(\"You won! This is win number  \"+ this.state.wins + \" for you. Congratulations!\");\n        this.resetGame();\n      }\n      else{\n        //we want to update the clicked status of the clicked card in our initialCards state array\n        var initialPositions = this.state.initialCards;\n        initialPositions[event.target.id].clicked = true;     \n        //store the new clicked value of the object back into our initialCards state array\n        this.setState({initialCards: initialPositions});\n\n        //shuffle the positions of the cards\n        var tempArr = this.state.cards;\n        this.shuffleArray(tempArr);\n      }\n    }\n    \n  }\n  isGameOver =() =>{\n    console.log(this.state.score);\n    if (this.state.score>= 11){\n      console.log(\"all images clicked no faults!\")\n      return true;\n    }\n    \n    return false;\n  }\n  //reset the game state to a new game\n  //Set the score to zero \n  //reinitialize the initialCards array\n  //we leave the cards array alone because all we ever do is rearrange\n  resetGame=()=>{\n    this.setState({score:0,\n                    initialCards:this.createCardArray()})\n  }\n\n  //this handles the re-arranging of elements after click\n  shuffleArray= (array) => {\n    var i = 0\n    , j = 0\n    , temp = null\n\n    for (i = array.length - 1; i > 0; i -= 1) {\n      j = Math.floor(Math.random() * (i + 1))\n      temp = array[i]\n      array[i] = array[j]\n      array[j] = temp\n    }\n    this.setState({cards:array})\n  }\n  updateScore(){\n    var newScore = this.state.score +1;\n    console.log(newScore);    \n    this.setState({score:newScore,infoText:\"You guessed Correctly!\"});\n    if(newScore>this.state.topScore){\n      this.setState({topScore:newScore});\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n      \n      <div>\n        <ScoreBar wins={this.state.wins}score={this.state.score} topScore = {this.state.topScore}infoText={this.state.infoText}/>\n      </div>\n      \n      <div className = \"jumbotron\">\n        <h1 className= \"title\">Clicky Game!</h1>\n        <h2 className= \"subtitle\">Click on an image to earn points, but don't click on the same character twice!</h2>\n      \n      </div>\n    \n\n      <div className =\"panel-container container group\">\n      <div className = \"game-block container\">\n          { \n            //add the cards to the page in the order in which they appear in this.state.cards\n            //This is what handles the position shuffling of the images.\n            this.state.cards.map((card) => (\n              <div key = {card.key} className = \"picture-card\"   onClick={this.handleClick} >\n                <img id={card.id}  className = {card.altText} src={card.href} alt={card.altText}></img>\n              </div>\n          ))}\n        </div>\n      </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default GamePanel;\n","import React, { Component } from 'react';\nimport './App.css';\n//import ScoreBar from \"./components/ScoreBar\";\nimport GamePanel from \"./components/GamePanel\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      \n        <GamePanel />\n      <footer className=\"footer clearfix bg-dark\">\n        <div className=\"bottom\">Clicky Game! \n        </div>\n      </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}